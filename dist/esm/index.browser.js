import { decode, encode } from '@juanelas/base64';
import { salt, scrypt } from 'scrypt-pbkdf';

async function kdf(password, saltBase64, params, derivedKeyLength = 32) {
    const scryptParams = {
        logN: 17,
        r: 8,
        p: 1,
        ...params
    };
    const scryptPbkdfParams = {
        N: 2 ** scryptParams.logN,
        r: scryptParams.r,
        p: scryptParams.p
    };
    const S = (saltBase64 !== undefined) ? decode(saltBase64) : salt();
    const SBase64 = encode(S, false, false);
    const hash = encode(await scrypt(password, S, derivedKeyLength, scryptPbkdfParams), false, false);
    return `$scrypt$ln=${scryptParams.logN},r=${scryptParams.r},p=${scryptParams.p}$${SBase64}$${hash}`;
}
async function verify(password, mcf) {
    const regex = /^\$scrypt\$ln=(\d{1,2}),r=(\d{1,2}),p=(\d{1,2})\$([a-zA-Z0-9/+]{22})\$([a-zA-Z0-9/+]{22,})$/g;
    const matches = [...mcf.matchAll(regex)];
    if (matches.length !== 1) {
        throw new Error('Invalid MCFstring format');
    }
    const logN = Number(matches[0][1]);
    const r = Number(matches[0][2]);
    const p = Number(matches[0][3]);
    const S = matches[0][4];
    const derivedKeyLength = 2 ** (Math.floor(Math.log2(matches[0][5].length * 6)) - 3);
    const passwordMfc = await kdf(password, S, { logN, r, p }, derivedKeyLength);
    return passwordMfc === mcf;
}

export { kdf, verify };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguYnJvd3Nlci5qcyIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3RzL2luZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpudWxsLCJuYW1lcyI6WyJiNjRkZWNvZGUiLCJnZXRSYW5kb21TYWx0IiwiYjY0ZW5jb2RlIl0sIm1hcHBpbmdzIjoiOzs7QUF1Qk8sZUFBZSxHQUFHLENBQUUsUUFBZ0IsRUFBRSxVQUFtQixFQUFFLE1BQXFCLEVBQUUsZ0JBQWdCLEdBQUcsRUFBRSxFQUFBO0FBQzVHLElBQUEsTUFBTSxZQUFZLEdBQTJCO0FBQzNDLFFBQUEsSUFBSSxFQUFFLEVBQUU7QUFDUixRQUFBLENBQUMsRUFBRSxDQUFDO0FBQ0osUUFBQSxDQUFDLEVBQUUsQ0FBQztBQUNKLFFBQUEsR0FBRyxNQUFNO0tBQ1YsQ0FBQTtBQUNELElBQUEsTUFBTSxpQkFBaUIsR0FBc0I7QUFDM0MsUUFBQSxDQUFDLEVBQUUsQ0FBQyxJQUFJLFlBQVksQ0FBQyxJQUFJO1FBQ3pCLENBQUMsRUFBRSxZQUFZLENBQUMsQ0FBQztRQUNqQixDQUFDLEVBQUUsWUFBWSxDQUFDLENBQUM7S0FDbEIsQ0FBQTtBQUNELElBQUEsTUFBTSxDQUFDLEdBQUcsQ0FBQyxVQUFVLEtBQUssU0FBUyxJQUFJQSxNQUFTLENBQUMsVUFBVSxDQUFDLEdBQUdDLElBQWEsRUFBRSxDQUFBO0lBQzlFLE1BQU0sT0FBTyxHQUFHQyxNQUFTLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQTtJQUMxQyxNQUFNLElBQUksR0FBR0EsTUFBUyxDQUFDLE1BQU0sTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLEVBQUUsZ0JBQWdCLEVBQUUsaUJBQWlCLENBQUMsRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUE7QUFDcEcsSUFBQSxPQUFPLGNBQWMsWUFBWSxDQUFDLElBQUksQ0FBQSxHQUFBLEVBQU0sWUFBWSxDQUFDLENBQUMsQ0FBTSxHQUFBLEVBQUEsWUFBWSxDQUFDLENBQUMsQ0FBQSxDQUFBLEVBQUksT0FBTyxDQUFJLENBQUEsRUFBQSxJQUFJLEVBQUUsQ0FBQTtBQUNyRyxDQUFDO0FBUU0sZUFBZSxNQUFNLENBQUUsUUFBZ0IsRUFBRSxHQUFXLEVBQUE7SUFDekQsTUFBTSxLQUFLLEdBQUcsOEZBQThGLENBQUE7SUFFNUcsTUFBTSxPQUFPLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQTtBQUV4QyxJQUFBLElBQUksT0FBTyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7QUFDeEIsUUFBQSxNQUFNLElBQUksS0FBSyxDQUFDLDBCQUEwQixDQUFDLENBQUE7QUFDNUMsS0FBQTtBQUVELElBQUEsTUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO0FBQ2xDLElBQUEsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO0FBQy9CLElBQUEsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBQy9CLE1BQU0sQ0FBQyxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtBQUN2QixJQUFBLE1BQU0sZ0JBQWdCLEdBQUcsQ0FBQyxLQUFLLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUE7QUFFbkYsSUFBQSxNQUFNLFdBQVcsR0FBRyxNQUFNLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxFQUFFLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFBO0lBRTVFLE9BQU8sV0FBVyxLQUFLLEdBQUcsQ0FBQTtBQUM1Qjs7OzsifQ==
